/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package InterfazGUI;

import Objetos.ArbolGenealogico;
import Objetos.DatosProyecto;
import Objetos.Funcion;
import Objetos.Grafos;
import Objetos.NodoArbol;
import Objetos.Persona;
import Primitivas.HashTable;
import Primitivas.Lista;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author nicolagabrielecolarusso
 */
public class InterfazPrueba1 extends javax.swing.JFrame {
    private Grafos grafo; 
    private HashTable<String, NodoArbol> tablaPersonasPorId; // Mapea ID de persona a NodoArbol
    private HashTable<String, String> nombreAId; // Mapea nombres (incluyendo apodos y alias Ãºnicos) a IDs
    private Lista<Persona> listaPersonas; // Lista de todas las personas
    private HashTable<String, String> nombreAIdModificado;
    private ArbolGenealogico arbolGenealogico;
    private Lista<Persona> resultados;

    /**
     * Creates new form InterfazPrueba1
     */
    public InterfazPrueba1() {
        initComponents();
        grafo = new Grafos();
        tablaPersonasPorId = new HashTable<>();
        nombreAId = new HashTable<>();
        listaPersonas = new Lista<>();
        nombreAIdModificado = new HashTable<>();
        arbolGenealogico = new ArbolGenealogico();
        resultados = new Lista<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BotonCargarJsonYGrafo = new javax.swing.JButton();
        TextoNombre = new javax.swing.JTextField();
        BotonBuscarPersona = new javax.swing.JButton();
        BotonGenerarSuArbol = new javax.swing.JButton();
        botonBuscarTitulo = new javax.swing.JButton();
        textoTitulo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoResultados = new javax.swing.JTextArea();
        BotonListaIntegrantes = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListadeNobilariosTitulo = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BotonCargarJsonYGrafo.setText("Json Cargar y hacer grafo");
        BotonCargarJsonYGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCargarJsonYGrafoActionPerformed(evt);
            }
        });

        BotonBuscarPersona.setText("Buscar Persona");
        BotonBuscarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarPersonaActionPerformed(evt);
            }
        });

        BotonGenerarSuArbol.setText("Generar arbol descendientes");
        BotonGenerarSuArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGenerarSuArbolActionPerformed(evt);
            }
        });

        botonBuscarTitulo.setText("Buscar Titulo");
        botonBuscarTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarTituloActionPerformed(evt);
            }
        });

        textoResultados.setColumns(20);
        textoResultados.setRows(5);
        jScrollPane1.setViewportView(textoResultados);

        BotonListaIntegrantes.setText("Lista de Integrantes");
        BotonListaIntegrantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonListaIntegrantesActionPerformed(evt);
            }
        });

        jButton1.setText("Generar arbol antepasados");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ListadeNobilariosTitulo.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListadeNobilariosTituloValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ListadeNobilariosTitulo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonBuscarTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(BotonCargarJsonYGrafo)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(BotonBuscarPersona)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(BotonGenerarSuArbol))
                                .addComponent(TextoNombre)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textoTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(260, 260, 260)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(47, 47, 47)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BotonListaIntegrantes, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BotonCargarJsonYGrafo)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(TextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonBuscarPersona)
                    .addComponent(BotonGenerarSuArbol))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(83, 83, 83)
                .addComponent(textoTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonBuscarTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(BotonListaIntegrantes)
                .addContainerGap(298, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonCargarJsonYGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCargarJsonYGrafoActionPerformed
        DatosProyecto datos = Funcion.leerJsonConFileChooser();
        Lista<Persona> personas = datos.getPersonas();

        if (personas != null && personas.getSize() > 0) {
            grafo.mostrarArbol();

            // Construir el Ã¡rbol genealÃ³gico y agregar los arcos al grafo
            arbolGenealogico.construirArbol(personas, grafo);

            // Construir la tabla de nombres modificados
            arbolGenealogico.construirTablaNombreModificado();
        }
    }//GEN-LAST:event_BotonCargarJsonYGrafoActionPerformed

    private void BotonBuscarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarPersonaActionPerformed
    String nombreBusqueda = TextoNombre.getText(); 
    Lista<NodoArbol> nodos = arbolGenealogico.buscarPorNombre(nombreBusqueda);

    if (nodos.getSize() > 0) {
        System.out.println("Personas encontradas:");
        for (int i = 0; i < nodos.getSize(); i++) {
            NodoArbol nodo = nodos.get(i);
            Persona persona = nodo.getPersona();
            System.out.println(persona.toString());
            
            // Crear una lista de listas para almacenar descendientes por nivel
            Lista<Lista<NodoArbol>> descendientesPorNivel = new Lista<>();
            arbolGenealogico.mostrarDescendientes(nodo, 1, descendientesPorNivel); // Nivel inicial es 1 para los hijos

            // Imprimir el nombre del padre y sus descendientes, excluyendo los nodos sin descendientes
        for (int nivel = 0; nivel < descendientesPorNivel.getSize(); nivel++) {
            Lista<NodoArbol> nivelDescendientes = descendientesPorNivel.get(nivel);
    
            // Mostrar el ID del padre de los descendientes, solo si hay descendientes en este nivel
            if (nivel > 0 && descendientesPorNivel.get(nivel - 1).getSize() > 0 && nivelDescendientes.getSize() > 0) {
                NodoArbol padre = descendientesPorNivel.get(nivel - 1).get(0);
            }

            // Listar los IDs de los hijos de este nivel
            for (int j = 0; j < nivelDescendientes.getSize(); j++) {
                NodoArbol descendiente = nivelDescendientes.get(j);
                Persona descendientePersona = descendiente.getPersona();
        
                // Almacenar el descendiente en tablaPersonasPorId para acceso rÃ¡pido
                tablaPersonasPorId.put(descendientePersona.getId(), descendiente);
            }
        }
        }
    }
    }//GEN-LAST:event_BotonBuscarPersonaActionPerformed

    private void BotonGenerarSuArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGenerarSuArbolActionPerformed
        String nombrePersona = TextoNombre.getText(); 
        if (nombrePersona == null || nombrePersona.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa un nombre vÃ¡lido.");
            return;
        }

        Grafos nuevoGrafo = new Grafos();
        nuevoGrafo.mostrarArbol();

        // Llamar al mÃ©todo para mostrar el Ã¡rbol genealÃ³gico de esa persona
        arbolGenealogico.mostrarArbolGenealogicoPorNombre(nombrePersona, nuevoGrafo);
    }//GEN-LAST:event_BotonGenerarSuArbolActionPerformed

    private void botonBuscarTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarTituloActionPerformed
        String tituloBusqueda = textoTitulo.getText().trim();
        if (tituloBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un tÃ­tulo vÃ¡lido.");
            return;
        }
        resultados = arbolGenealogico.buscarPorTitulo(tituloBusqueda);
        if (resultados.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron personas con ese tÃ­tulo.");
            return;
        }
        // Crear un modelo para el JList
        DefaultListModel<String> modeloLista = new DefaultListModel<>();
        for (int i = 0; i < resultados.getSize(); i++) {
            Persona persona = resultados.get(i);
            modeloLista.addElement(persona.getNombre()); // Mostrar solo el nombre
        }
        // Asignar el modelo al JList
        ListadeNobilariosTitulo.setModel(modeloLista);
        JOptionPane.showMessageDialog(this, "Selecciona un registro para ver mÃ¡s detalles.");
    }//GEN-LAST:event_botonBuscarTituloActionPerformed

    private void BotonListaIntegrantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonListaIntegrantesActionPerformed
       //Agregar el codigo de Lista Integrantes de una generacion
    }//GEN-LAST:event_BotonListaIntegrantesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String nombreBusqueda = TextoNombre.getText(); 
        Lista<NodoArbol> nodos = arbolGenealogico.buscarPorNombre(nombreBusqueda);

        if (nodos.getSize() > 0) {
            for (int i = 0; i < nodos.getSize(); i++) {
                NodoArbol nodo = nodos.get(i);
                Persona persona = nodo.getPersona();

                // Crear un grafo temporal para mostrar los antepasados
                Grafos grafosAntepasados = new Grafos();
                grafosAntepasados.mostrarArbol();


                // Llamar a la funciÃ³n para mostrar antepasados por nombre
                arbolGenealogico.mostrarAntepasadosPorNombre(persona.getNombre(), grafosAntepasados);

                // En este punto, los antepasados estÃ¡n aÃ±adidos en grafosAntepasados y el grafo estÃ¡ mostrado
            }
        } else {
            System.out.println("No se encontraron antepasados para la persona con el nombre proporcionado.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ListadeNobilariosTituloValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListadeNobilariosTituloValueChanged
        if (!evt.getValueIsAdjusting()) { // Evita manejar eventos mÃºltiples al cambiar selecciÃ³n
            int indiceSeleccionado = ListadeNobilariosTitulo.getSelectedIndex();
            if (indiceSeleccionado != -1) {
                Persona personaSeleccionada = resultados.get(indiceSeleccionado);
            // Mostrar detalles en un JTextArea o ventana emergente
                textoResultados.setText("Detalles de la persona seleccionada:\n" + personaSeleccionada.toString());
            }
        }   
    }//GEN-LAST:event_ListadeNobilariosTituloValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrueba1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBuscarPersona;
    private javax.swing.JButton BotonCargarJsonYGrafo;
    private javax.swing.JButton BotonGenerarSuArbol;
    private javax.swing.JButton BotonListaIntegrantes;
    private javax.swing.JList<String> ListadeNobilariosTitulo;
    private javax.swing.JTextField TextoNombre;
    private javax.swing.JButton botonBuscarTitulo;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textoResultados;
    private javax.swing.JTextField textoTitulo;
    // End of variables declaration//GEN-END:variables
}
