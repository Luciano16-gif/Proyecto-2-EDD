/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package InterfazGUI;

import Objetos.ArbolGenealogico;
import Objetos.DatosProyecto;
import Objetos.Funcion;
import Objetos.Grafos;
import Objetos.NodoArbol;
import Objetos.Persona;
import Primitivas.HashTable;
import Primitivas.Lista;
import javax.swing.JOptionPane;

/**
 *
 * @author nicolagabrielecolarusso
 */
public class InterfazPrueba1 extends javax.swing.JFrame {
    private Grafos grafo; 
    private HashTable<String, NodoArbol> tablaPersonasPorId; // Mapea ID de persona a NodoArbol
    private HashTable<String, String> nombreAId; // Mapea nombres (incluyendo apodos y alias únicos) a IDs
    private Lista<Persona> listaPersonas; // Lista de todas las personas
    private HashTable<String, String> nombreAIdModificado;
    private ArbolGenealogico arbolGenealogico; 

    /**
     * Creates new form InterfazPrueba1
     */
    public InterfazPrueba1() {
        initComponents();
        grafo = new Grafos();
        tablaPersonasPorId = new HashTable<>();
        nombreAId = new HashTable<>();
        listaPersonas = new Lista<>();
        nombreAIdModificado = new HashTable<>();
        arbolGenealogico = new ArbolGenealogico();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BotonCargarJsonYGrafo = new javax.swing.JButton();
        TextoNombre = new javax.swing.JTextField();
        BotonBuscarPersona = new javax.swing.JButton();
        BotonGenerarSuArbol = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BotonCargarJsonYGrafo.setText("Json Cargar y hacer grafo");
        BotonCargarJsonYGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCargarJsonYGrafoActionPerformed(evt);
            }
        });

        BotonBuscarPersona.setText("Buscar Persona");
        BotonBuscarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarPersonaActionPerformed(evt);
            }
        });

        BotonGenerarSuArbol.setText("Generar su arbol");
        BotonGenerarSuArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGenerarSuArbolActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(246, 246, 246)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BotonBuscarPersona)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BotonGenerarSuArbol))
                            .addComponent(TextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BotonCargarJsonYGrafo))))
                .addContainerGap(208, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BotonCargarJsonYGrafo)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(TextoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonBuscarPersona)
                    .addComponent(BotonGenerarSuArbol))
                .addContainerGap(246, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotonCargarJsonYGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCargarJsonYGrafoActionPerformed
    DatosProyecto datos = Funcion.leerJsonConFileChooser();
    Lista<Persona> personas = datos.getPersonas();
    
    if (personas != null && personas.getSize() > 0) {
        grafo.mostrarArbol();
        
        // Construir el árbol genealógico y agregar los arcos al grafo
        arbolGenealogico.construirArbol(personas, grafo);

        // Construir la tabla de nombres modificados
        arbolGenealogico.construirTablaNombreModificado();
    }
    }//GEN-LAST:event_BotonCargarJsonYGrafoActionPerformed

    private void BotonBuscarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarPersonaActionPerformed
    String nombreBusqueda = TextoNombre.getText(); 
    Lista<NodoArbol> nodos = arbolGenealogico.buscarPorNombre(nombreBusqueda);

    if (nodos.getSize() > 0) {
    System.out.println("Personas encontradas:");
    for (int i = 0; i < nodos.getSize(); i++) {
        NodoArbol nodo = nodos.get(i);
        Persona persona = nodo.getPersona();
        System.out.println(persona.toString());

        // Mostrar los padres
        System.out.println("Padres de " + persona.getNombre() + ":");
        for (int j = 0; j < nodo.getPadres().len(); j++) {
            NodoArbol padre = nodo.getPadres().get(j);
            System.out.println(" - " + padre.getPersona().getNombre());
        }

        // Mostrar los hijos
        System.out.println("Hijos de " + persona.getNombre() + ":");
        for (int j = 0; j < nodo.getHijos().len(); j++) {
            NodoArbol hijo = nodo.getHijos().get(j);
            System.out.println(" - " + hijo.getPersona().getNombre());

            // Buscar hijos del hijo en nombreAId
            String hijoId = nombreAId.get(hijo.getPersona().getNombre());
            if (hijoId != null) {
                NodoArbol nodoHijo = tablaPersonasPorId.get(hijoId);

                // Si el nodoHijo existe y tiene hijos, mostrar los nietos
                if (nodoHijo != null && nodoHijo.getHijos().len() > 0) {
                    System.out.println("   Nietos de " + persona.getNombre() + " a través de " + hijo.getPersona().getNombre() + ":");
                    for (int k = 0; k < nodoHijo.getHijos().len(); k++) {
                        NodoArbol nieto = nodoHijo.getHijos().get(k);
                        System.out.println("   - " + nieto.getPersona().getNombre());
                    }
                }
            }
        }
    }
} else {
    System.out.println("No se encontró ninguna persona con el nombre: " + nombreBusqueda);
}
    }//GEN-LAST:event_BotonBuscarPersonaActionPerformed

    private void BotonGenerarSuArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGenerarSuArbolActionPerformed
    String nombrePersona = TextoNombre.getText(); 
    if (nombrePersona == null || nombrePersona.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor ingresa un nombre válido.");
        return;
    }
    
    Grafos nuevoGrafo = new Grafos();
    nuevoGrafo.mostrarArbol();

    // Llamar al método para mostrar el árbol genealógico de esa persona
    arbolGenealogico.mostrarArbolGenealogicoPorNombre(nombrePersona, nuevoGrafo);
    }//GEN-LAST:event_BotonGenerarSuArbolActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrueba1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrueba1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBuscarPersona;
    private javax.swing.JButton BotonCargarJsonYGrafo;
    private javax.swing.JButton BotonGenerarSuArbol;
    private javax.swing.JTextField TextoNombre;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
