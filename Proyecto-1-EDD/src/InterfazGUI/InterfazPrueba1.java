/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package InterfazGUI;

import Objetos.ArbolGenealogico;
import Objetos.DatosProyecto;
import Objetos.Funcion;
import Objetos.Grafos;
import Objetos.NodoArbol;
import Objetos.Persona;
import Primitivas.HashTable;
import Primitivas.Lista;
import java.awt.Graphics;
import java.awt.Image;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * La clase InterfazFinal representa la interfaz gráfica de usuario (GUI) para interactuar con el árbol genealógico
 * Proporciona funcionalidades para cargar datos, buscar persona, generar sus antepasados, descendientes, buscar por su titulo, nombre, buscar generacion, y tambien ver descendecia y ascedencia
 * 
 * @author Ricardo Paez - Luciano Minardo - Gabriele Colarusso
 * @version 21/11/2024
 */
public class InterfazPrueba1 extends javax.swing.JFrame {
    FondoPanel fondo = new FondoPanel();
    private Grafos grafo; 
    private HashTable<String, NodoArbol> tablaPersonasPorId; // Mapea ID de persona a NodoArbol
    private HashTable<String, String> nombreAId; // Mapea nombres (incluyendo apodos y alias únicos) a IDs
    private Lista<Persona> listaPersonas; // Lista de todas las personas
    private HashTable<String, String> nombreAIdModificado;
    private ArbolGenealogico arbolGenealogico;
    private Lista<Persona> resultados;

    /**
     * Creates new form InterfazPrueba1
     */
    public InterfazPrueba1() {
        this.setContentPane(fondo);
        initComponents();
        grafo = new Grafos();
        tablaPersonasPorId = new HashTable<>();
        nombreAId = new HashTable<>();
        listaPersonas = new Lista<>();
        nombreAIdModificado = new HashTable<>();
        arbolGenealogico = new ArbolGenealogico();
        resultados = new Lista<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListadeNobilariosTitulo = new javax.swing.JList<>();
        BotonCargarJsonYGrafo = new javax.swing.JButton();
        BotonBuscarNombre = new javax.swing.JButton();
        BotonBuscarGeneracion = new javax.swing.JButton();
        BotonVerAscendencia = new javax.swing.JButton();
        TextoNombre = new javax.swing.JTextField();
        BotonBuscarPersona = new javax.swing.JButton();
        BotonGenerarSuArbol = new javax.swing.JButton();
        botonBuscarTitulo = new javax.swing.JButton();
        textoTitulo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoResultados = new javax.swing.JTextArea();
        BotonListaIntegrantes = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto 2 - Arbol Genealogico");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 47, -1, -1));

        ListadeNobilariosTitulo.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListadeNobilariosTituloValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ListadeNobilariosTitulo);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 420, 320, 120));

        BotonCargarJsonYGrafo.setBackground(new java.awt.Color(204, 204, 255));
        BotonCargarJsonYGrafo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BotonCargarJsonYGrafo.setText("Json Cargar y hacer grafo");
        BotonCargarJsonYGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCargarJsonYGrafoActionPerformed(evt);
            }
        });
        getContentPane().add(BotonCargarJsonYGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 290, 80));

        BotonBuscarNombre.setBackground(new java.awt.Color(204, 204, 255));
        BotonBuscarNombre.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BotonBuscarNombre.setText("Buscar Nombre");
        BotonBuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarNombreActionPerformed(evt);
            }
        });
        getContentPane().add(BotonBuscarNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 350, 180, 50));

        BotonBuscarGeneracion.setBackground(new java.awt.Color(204, 204, 255));
        BotonBuscarGeneracion.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BotonBuscarGeneracion.setText("Buscar Generacion");
        BotonBuscarGeneracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarGeneracionActionPerformed(evt);
            }
        });
        getContentPane().add(BotonBuscarGeneracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 350, 250, 50));

        BotonVerAscendencia.setBackground(new java.awt.Color(204, 204, 255));
        BotonVerAscendencia.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BotonVerAscendencia.setText("Ver Ascendencia");
        BotonVerAscendencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonVerAscendenciaActionPerformed(evt);
            }
        });
        getContentPane().add(BotonVerAscendencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 390, 180, 60));
        getContentPane().add(TextoNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, 280, -1));

        BotonBuscarPersona.setBackground(new java.awt.Color(204, 204, 255));
        BotonBuscarPersona.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BotonBuscarPersona.setText("Buscar Persona");
        BotonBuscarPersona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBuscarPersonaActionPerformed(evt);
            }
        });
        getContentPane().add(BotonBuscarPersona, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 90, 270, 60));

        BotonGenerarSuArbol.setBackground(new java.awt.Color(204, 204, 255));
        BotonGenerarSuArbol.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BotonGenerarSuArbol.setText("Generar arbol descendientes");
        BotonGenerarSuArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGenerarSuArbolActionPerformed(evt);
            }
        });
        getContentPane().add(BotonGenerarSuArbol, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 190, 250, 70));

        botonBuscarTitulo.setBackground(new java.awt.Color(204, 204, 255));
        botonBuscarTitulo.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        botonBuscarTitulo.setText("Buscar Titulo");
        botonBuscarTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarTituloActionPerformed(evt);
            }
        });
        getContentPane().add(botonBuscarTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 350, 180, 50));

        textoTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textoTituloActionPerformed(evt);
            }
        });
        getContentPane().add(textoTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 310, 340, -1));

        textoResultados.setColumns(20);
        textoResultados.setRows(5);
        jScrollPane1.setViewportView(textoResultados);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 420, 450, 120));

        BotonListaIntegrantes.setBackground(new java.awt.Color(204, 204, 255));
        BotonListaIntegrantes.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        BotonListaIntegrantes.setText("Ver Descendencia");
        BotonListaIntegrantes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonListaIntegrantesActionPerformed(evt);
            }
        });
        getContentPane().add(BotonListaIntegrantes, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 460, 180, 60));

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jButton1.setText("Generar arbol antepasados");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 190, 270, 70));

        jLabel1.setText("Escribe el nombre completo que deseas buscar");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 300, -1));

        jLabel2.setText("Selecciona un boton que deas usar: Generar Árbol de descendientes o el de antepasados");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 160, 550, -1));

        jLabel3.setText("Introduce un nombre, titulo o un numero para buscar la generacion correspondiente");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 280, 530, -1));

        jLabel4.setText("Selecciona el Json que deseas cargar para mostrar su Árbol Genealógico");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, 440, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListadeNobilariosTituloValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListadeNobilariosTituloValueChanged
        if (!evt.getValueIsAdjusting()) { // Evita manejar eventos múltiples al cambiar selección
            int indiceSeleccionado = ListadeNobilariosTitulo.getSelectedIndex();
            if (indiceSeleccionado != -1) {
                Persona personaSeleccionada = resultados.get(indiceSeleccionado);
                // Mostrar detalles en un JTextArea o ventana emergente
                textoResultados.setText("Detalles de la persona seleccionada:\n" + personaSeleccionada.toString());
            }
        }
    }//GEN-LAST:event_ListadeNobilariosTituloValueChanged

    private void BotonCargarJsonYGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCargarJsonYGrafoActionPerformed
        DatosProyecto datos = Funcion.leerJsonConFileChooser();
        Lista<Persona> personas = datos.getPersonas();

        if (personas != null && personas.getSize() > 0) {
            Grafos nuevoGrafo = new Grafos();
            nuevoGrafo.mostrarArbol(arbolGenealogico);

            // Construir el árbol genealógico y agregar los arcos al grafo
            arbolGenealogico.construirArbol(personas, nuevoGrafo);

            // Construir la tabla de nombres modificados
            arbolGenealogico.construirTablaNombreModificado();
        }
    }//GEN-LAST:event_BotonCargarJsonYGrafoActionPerformed

    private void BotonBuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarNombreActionPerformed
        String nombreBusqueda = textoTitulo.getText().trim();
        if (nombreBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un nombre o mote válido.");
            return;
        }
        resultados = arbolGenealogico.buscarPorNombreParcial(nombreBusqueda);
        if (resultados.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron personas con ese nombre o mote.");
            return;
        }
        // Crear un modelo para el JList
        DefaultListModel<String> modeloLista = new DefaultListModel<>();
        for (int i = 0; i < resultados.getSize(); i++) {
            Persona persona = resultados.get(i);
            modeloLista.addElement(persona.getNombre()); // Mostrar solo el nombre
        }
        // Asignar el modelo al JList
        ListadeNobilariosTitulo.setModel(modeloLista);
        JOptionPane.showMessageDialog(this, "Selecciona un registro para ver más detalles.");
    }//GEN-LAST:event_BotonBuscarNombreActionPerformed

    private void BotonBuscarGeneracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarGeneracionActionPerformed
        try {
            int numeroGeneracion = Integer.parseInt(textoTitulo.getText().trim());

            if (numeroGeneracion < 0) {
                JOptionPane.showMessageDialog(this, "El número de generación debe ser mayor o igual a 0.");
                return;
            }

            // Obtener la altura del árbol
            int alturaArbol = arbolGenealogico.obtenerAltura();

            if (numeroGeneracion >= alturaArbol) {
                JOptionPane.showMessageDialog(this, "El número de generación supera la altura del árbol genealógico (" + (alturaArbol-1) + ").");
                return;
            }

            // Obtener los resultados de la generación solicitada
            resultados = arbolGenealogico.obtenerPersonasGeneracion(numeroGeneracion);

            if (resultados.getSize() == 0) {
                JOptionPane.showMessageDialog(this, "No se encontraron personas en la generación solicitada.");
                return;
            }

            // Crear un modelo para el JList
            DefaultListModel<String> modeloLista = new DefaultListModel<>();
            for (int i = 0; i < resultados.getSize(); i++) {
                Persona persona = resultados.get(i);
                modeloLista.addElement(persona.getNombre()); // Mostrar solo el nombre
            }

            // Asignar el modelo al JList
            ListadeNobilariosTitulo.setModel(modeloLista);
            JOptionPane.showMessageDialog(this, "Selecciona un registro para ver más detalles.");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un número válido para la generación.");
        }
    }//GEN-LAST:event_BotonBuscarGeneracionActionPerformed

    private void BotonVerAscendenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonVerAscendenciaActionPerformed
        String nombreBusqueda = textoTitulo.getText().trim();

        if (nombreBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un nombre válido.");
            return;
        }

        Lista<Persona> resultados = arbolGenealogico.buscarPorNombreParcial(nombreBusqueda);

        if (resultados.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontró ninguna persona con el nombre: " + nombreBusqueda);
            return;
        }

        Persona personaSeleccionada = resultados.get(0);

        String descendencia = arbolGenealogico.obtenerAscendenciaOrdenada(personaSeleccionada.getNombre());

        textoResultados.setText(descendencia);
    }//GEN-LAST:event_BotonVerAscendenciaActionPerformed

    private void BotonBuscarPersonaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarPersonaActionPerformed
        String nombreBusqueda = TextoNombre.getText();
        Lista<NodoArbol> nodos = arbolGenealogico.buscarPorNombre(nombreBusqueda);

        if (nodos.getSize() > 0) {
            System.out.println("Personas encontradas:");
            for (int i = 0; i < nodos.getSize(); i++) {
                NodoArbol nodo = nodos.get(i);
                Persona persona = nodo.getPersona();
                System.out.println(persona.toString());

                // Crear una lista de listas para almacenar descendientes por nivel
                Lista<Lista<NodoArbol>> descendientesPorNivel = new Lista<>();
                arbolGenealogico.mostrarDescendientes(nodo, 1, descendientesPorNivel); // Nivel inicial es 1 para los hijos

                // Imprimir el nombre del padre y sus descendientes, excluyendo los nodos sin descendientes
                for (int nivel = 0; nivel < descendientesPorNivel.getSize(); nivel++) {
                    Lista<NodoArbol> nivelDescendientes = descendientesPorNivel.get(nivel);

                    // Mostrar el ID del padre de los descendientes, solo si hay descendientes en este nivel
                    if (nivel > 0 && descendientesPorNivel.get(nivel - 1).getSize() > 0 && nivelDescendientes.getSize() > 0) {
                        NodoArbol padre = descendientesPorNivel.get(nivel - 1).get(0);
                    }

                    // Listar los IDs de los hijos de este nivel
                    for (int j = 0; j < nivelDescendientes.getSize(); j++) {
                        NodoArbol descendiente = nivelDescendientes.get(j);
                        Persona descendientePersona = descendiente.getPersona();

                        // Almacenar el descendiente en tablaPersonasPorId para acceso rápido
                        tablaPersonasPorId.put(descendientePersona.getId(), descendiente);
                    }
                }
            }
        }
    }//GEN-LAST:event_BotonBuscarPersonaActionPerformed

    private void BotonGenerarSuArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGenerarSuArbolActionPerformed
        String nombrePersona = TextoNombre.getText();
        if (nombrePersona == null || nombrePersona.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa un nombre válido.");
            return;
        }

        Grafos nuevoGrafo = new Grafos();
        nuevoGrafo.mostrarArbol(arbolGenealogico);

        // Llamar al método para mostrar el árbol genealógico de esa persona
        arbolGenealogico.mostrarArbolGenealogicoPorNombre(nombrePersona, nuevoGrafo);
    }//GEN-LAST:event_BotonGenerarSuArbolActionPerformed

    private void botonBuscarTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarTituloActionPerformed
        String tituloBusqueda = textoTitulo.getText().trim();
        if (tituloBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un título válido.");
            return;
        }
        resultados = arbolGenealogico.buscarPorTitulo(tituloBusqueda);
        if (resultados.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron personas con ese título.");
            return;
        }
        // Crear un modelo para el JList
        DefaultListModel<String> modeloLista = new DefaultListModel<>();
        for (int i = 0; i < resultados.getSize(); i++) {
            Persona persona = resultados.get(i);
            modeloLista.addElement(persona.getNombre()); // Mostrar solo el nombre
        }
        // Asignar el modelo al JList
        ListadeNobilariosTitulo.setModel(modeloLista);
        JOptionPane.showMessageDialog(this, "Selecciona un registro para ver más detalles.");
    }//GEN-LAST:event_botonBuscarTituloActionPerformed

    private void textoTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textoTituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textoTituloActionPerformed

    private void BotonListaIntegrantesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonListaIntegrantesActionPerformed
        String nombreBusqueda = textoTitulo.getText().trim();

        if (nombreBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingresa un nombre válido.");
            return;
        }

        Lista<Persona> resultados = arbolGenealogico.buscarPorNombreParcial(nombreBusqueda);

        if (resultados.getSize() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontró ninguna persona con el nombre: " + nombreBusqueda);
            return;
        }

        Persona personaSeleccionada = resultados.get(0);

        String descendencia = arbolGenealogico.obtenerDescendenciaOrdenada(personaSeleccionada.getNombre());

        textoResultados.setText(descendencia);
    }//GEN-LAST:event_BotonListaIntegrantesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String nombrePersona = TextoNombre.getText();
        if (nombrePersona == null || nombrePersona.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa un nombre válido.");
            return;
        }

        Grafos nuevoGrafo = new Grafos();
        nuevoGrafo.mostrarArbol(arbolGenealogico);

        // Llamar al método para mostrar el árbol genealógico de esa persona
        arbolGenealogico.mostrarAntepasados(nombrePersona, nuevoGrafo);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonBuscarGeneracion;
    private javax.swing.JButton BotonBuscarNombre;
    private javax.swing.JButton BotonBuscarPersona;
    private javax.swing.JButton BotonCargarJsonYGrafo;
    private javax.swing.JButton BotonGenerarSuArbol;
    private javax.swing.JButton BotonListaIntegrantes;
    private javax.swing.JButton BotonVerAscendencia;
    private javax.swing.JList<String> ListadeNobilariosTitulo;
    private javax.swing.JTextField TextoNombre;
    private javax.swing.JButton botonBuscarTitulo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textoResultados;
    private javax.swing.JTextField textoTitulo;
    // End of variables declaration//GEN-END:variables
        
    class FondoPanel extends JPanel
    {
        private Image imagen;
        
        @Override
        public void paint(Graphics g)
        {
            imagen = new ImageIcon(getClass().getResource("/Imagenes/ImagenFondoInterfaz.jpg")).getImage();
            
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);
            
            setOpaque(false);
            
            super.paint(g);
        }
    }
}
